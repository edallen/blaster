Automating the blast path

Right now it's hardcoded to my home dir on sgtc-rails, in a subdir named blast.

In hand I have scripts
~/blast/bin/fasta40.rb  # run previously on laptop, may need path tweakage
                        # dices a full genome fasta file into 40mers and 
                        # prescreens 40mers, saves as individual files
                        
Manually transferred (scp) and catted all the 40mers in a batch into one file
Ran ~/blast/40mer_out/run_blast_NC_002946.sh against cat file all_NC_002946_40mers to generate
blast results file blast_2946.out
~/blast/40mer_out holds sequence files 
Need to move ~/blast/40mer_out/run_blast_NC_002946.sh and be ready to generate the equivalent commands for each starter sequence.

~/blast/bin/bin_fortymers.rb compares input file all_NC_002946_40mers with blast_2946.out and generates match file matched_2946 and no match list file unmatched_2946.  Match meaning that it found a 17 or more base match by the basic blast criteria used. So far this is only doing the simple exclusionary screen vs human genome

Proper flow would be more like:

Usage:
screen_and_blast.rb <genome.fna file> <genus> <species> 
# first argument input, the genome fasta file NC_number.
# genus and species arguments are for use in parsing description strings from matched headers.

Steps:
 creates 40mers, screens them, write them out in one big file.
 Screen will need foldback test added.
 File it creates is named for the genome fasta file used.
 Individual 40mers  within it named as current for source and position. 
 Blast against all the pertinent blast db files, saving the results.
 After all blasting, parse the results to bin.
 Bins:
 human_match_<NC_number>  # generated by small modification to bin_fortymers.rb
 other_match_<NC_number>  # Will need a better parse for second half, 
                          # with a lookup (or inclusion in blast results)
                          # of full source descriptions, which get matched against
                          # genus and species names to decide on bins.
                          # If any significant match doesn't match genus, bin here.
 genus_match_<NC_number> # significant match to genus but not species name goes here
 species_match_<NC_number> # significant matches all contain species name in header
 no_match_<NC_number> # no match turned up - indicates a problem since self match should turn up
Write out a file for each bin.
Since multiple files are being output for each organism tested, should have all for the organism collected into one directory named for the NC_number

Whole process should be invoked for one genome by a single command line described above, with some occasional feedback written into standard out as steps are completed.
